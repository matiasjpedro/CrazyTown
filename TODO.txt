================ NOTES 

================ Backlog

// Support to listen from a websocket?
// Support through multiple logs -> TabItemButton
// Remove window border?

================ Next

// don't cleanup when switching to streaming, because we loose the path, or at least reapply
// If press saved in a filter that already exist Modify it instead of append
// Release builds should not create the temp dll
// Add ms performance,
// Check for memory leaks
// Think on how to support multiple processes writing in the FolderQuery
// Save Target input field values?

// Add version number
// Select char by mouse movement (think on how I can integrate seemingly into the highlight array)

================ InProgress

// Save Colors selecter for the filters?

================ Done

// TODO check memory usage on streaming
// Support Filter Grouping with ()
// Use C synthax for filters
// Add clipper to the filtred view
// After loading an static file and tried to stream the file it will not stream if it has the same name,
// I should check the creation date.
// When pressing alt avoid scroll
// Fix Streaming mode crashing on release build 
// Do the enum to select the target mode
// Fixed crash when Fetching file differences 
// Fixed line selection not selecting the last line
// Added last command separator
// Make a mark helper with all the shortcuts
// Fix Copy to clipboard spaces?
// Install UE5 run the game and see if we can open those logs with the streaming feature
// Fixed highlight not behaving correctly when having multiple matches with the same word begin
// Fixed highlight not behaving accordingly when the matches were out of order
// Support zoom, the _correct_ way of scaling your UI is currently to reload your font at the designed size
// Find where I'm leaking memory, probably in the highlight vectors
// Added different colors to the filters
// Fixed word selection after introduced highlight feature 
// Added highlight to the filtred words
// F5 will refetch the file
// Make sure to leave the peeking when the filters are modified
// press enter to search for the new value
// Filter Only the new lines after the cache
// Make function to handle the scratch allocator easier?
// Alt + mouse over should select amount of words after the one currently hovering
// Make the feature request to have access to the defines
// Make the debug/release build changes
// Make the feature request to focus the text once we are in the symbol references
// Make the feature request to remember the source preview size in the find panels
// Add utility for scratch allocator and strings
// Added a way to copy individual characters Alt + Scroll
// Implement ListenForLatestFile
// Make possible to select as flags the different filters of your preset
// New font in the binary using base85 and D:\Dev\imgui\misc\fonts\binary_to_compressed_c.cpp
// Improve font readibility on the output
// When peeking try mantain the line in the same part of the screen
// Have a way of telling you're in peeking mode
// Keep listening to the Target file changes
// Only filter the new lines
// Make smarter allocations/copy/reserve/resize
// Setup silly repo
// Context menu in the output view?
// Paste from clipboard - GetClipboardText
// Add line number
// Have the ability to remove one of your saved filters
// Test filters, how to reselect the filter after we deleted manually
// When we save a filter automatically trigger a reload
// Can we catch the lines that we should show?
// Time to optimize, the filter is getting slow
// Increase font size of the filter log
// Make dropdown selectable
// Have the ability to Save MultipleFilters
// Store/Load Filter
// Extrate the Example log to our own app
// Make a method that it does not try to append to the previous buffer and crash.
// Load an specific file give the path
// Have multiple filters instead of only one
// Store permanent memory to use instead of an struct throwed in the Platform context;
// Mantain Platform code in the platform layer (ImGUI win32 d3d11)
// Simple Setup imgui
// Pass to the hotreload call so we can modify the ImGUI from the application
// Cleanup the memcpy it's just terrible
// build the game.dll and reload
// Setup hot reload
